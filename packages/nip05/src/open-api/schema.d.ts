/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/registrations': {
    /** @description Get all registrations. */
    get: {
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['RegistrationDto'][];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
  '/registration/{id}': {
    /** @description Get a single registration by its id. */
    get: {
      parameters: {
        path: {
          /**
           * @description Registration id
           * @example 5f4e4b2b-3b4d-4b5d-8f93-6c260f1f3d1d
           */
          id: string;
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['RegistrationDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description A registration with the specified id was not found. */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /** @description Update a registration by its id. */
    patch: {
      parameters: {
        path: {
          /**
           * @description Registration id
           * @example 5f4e4b2b-3b4d-4b5d-8f93-6c260f1f3d1d
           */
          id: string;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['RegistrationPatchDto'];
        };
      };
      responses: {
        /** @description Ok */
        200: {
          content: {
            'application/json': components['schemas']['RegistrationDto'];
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description A registration with the specified id was not found. */
        404: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An error occurred while updating the registration. */
        500: {
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      message?: string;
    };
    RegistrationDto: {
      /** @example 5f4e4b2b-3b4d-4b5d-8f93-6c260f1f3d1d */
      id: string;
      /** @example b604d4ad-271d-46b4-a14b-ac15439e07a3 */
      userId: string;
      /** @example starlord@nip05.social */
      nostrAddress: string;
      /** @example tellington12@walletofsatoshi.com */
      lightningAddress: string | null;
      /** @example true */
      emailIn: boolean;
      /** @example false */
      emailOut: boolean;
      /** @example Nostr2Email is cool! */
      emailOutSubject: string;
      relays: string[];
    };
    RegistrationPatchDto: {
      /** @example tellington12@walletofsatoshi.com */
      lightningAddress?: string | null;
      /** @example true */
      emailIn?: boolean;
      /** @example false */
      emailOut?: boolean;
      /** @example Nostr2Email is cool! */
      emailOutSubject?: string;
      relays?: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
